{"version":3,"sources":["Components/Header.js","Components/TopBar.js","Components/Tasks.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","this","props","title","Component","TopBar","e","handlesubmit","target","elements","new_task","value","console","log","length","addTask","reset","preventDefault","completed","uncomplete","pending","data-target","onSubmit","id","type","name","placeholder","autoComplete","href","Tasks","handleDone","i","deleteTask","list","map","item","key","onClick","App","state","tasks","countCompleted","countUncompleted","countPending","task","setState","arr","splice","bind","taskList","Boolean","window","location","hostname","match","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.97c3fd2f.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport '../index.css';\n\nclass Header extends Component {\n  render(){\n    return(\n      <div className=\"col center-align s12 m12 l12\">\n      <h1>{this.props.title}</h1>\n    </div>\n  )}\n}\n\nexport default Header;\n","import React, { Component } from 'react';\nimport '../index.css';\n\nclass TopBar extends Component{\n  constructor(props, e)\n  {\n    super(props);\n  }\n  render(){\n    let { completed, uncomplete, pending } = this.props;\n    return(\n      <div className=\"row\">\n        <div className=\"center-align add-button col l3 m3 s12\">\n          <button data-target=\"modal1\" className=\" btn btn-floating btn-large waves-effect waves-light red modal-trigger\"><i className=\"material-icons\">add</i></button>\n          <form onSubmit={this.handlesubmit} id=\"modal1\" className=\"modal\">\n           <div className=\"modal-content\">\n             <h4>What else do you plan on doing today?</h4>\n             <input type=\"text\" name=\"new_task\" placeholder=\"Write inside me!\" autoComplete=\"off\"/>\n           </div>\n           <div className=\"modal-footer\">\n             <button type='submit' href=\"#!\" className=\"modal-close waves-effect waves-green btn-flat\"><i className=\"material-icons\">send</i></button>\n           </div>\n         </form>\n        </div>\n        <div className=\"center-align add-button col l3 m3 s12\">\n          <div className=\"card-panel\">\n              <span className=\"black-text text-darken-2\">{completed} tasks completed</span>\n          </div>\n        </div>\n        <div className=\"center-align add-button col l3 m3 s12\">\n          <div className=\"card-panel\">\n            <span className=\"black-text text-darken-2\">{uncomplete} tasks uncompleted</span>\n          </div>\n        </div>\n        <div className=\"center-align add-button col l3 m3 s12\">\n          <div className=\"card-panel\">\n              <span className=\"black-text text-darken-2\">{pending} tasks pending</span>\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n  handlesubmit = (e) => {\n    var target = e.target.elements.new_task.value;\n    console.log(target);\n    if(target.length > 0 && target !== \" \"){\n      this.props.addTask(target);\n      e.target.reset();\n      e.preventDefault();\n    }\n  }\n}\n\nexport default TopBar;\n","import React, { Component } from 'react';\nimport '../index.css';\n\nclass Tasks extends Component{\n  render(){\n    const { list } = this.props;\n    return(\n      <ul className=\"collection\">\n        {list.map((item, i)=>{\n          return(\n          <li key={i} className=\"collection-item\">\n            <div>\n            {item}\n              <a onClick={e => this.handleDone(e, {i})} href=\"#!\" className=\"secondary-content\">\n                <i className=\"material-icons\">done</i>\n              </a>\n              <a onClick={e => this.deleteTask(e, {i})} href=\"#!\" className=\"secondary-content\">\n                <i className=\"material-icons\">clear</i>\n              </a>\n            </div>\n          </li>\n        );\n        })}\n      </ul>\n    );\n  }\n\n  handleDone = (e, i)=>{\n    var target = i;\n    this.props.handleDone(target);\n  }\n\n  deleteTask = (e, i) =>{\n    var target = i;\n    this.props.deleteTask(target);\n  }\n}\n\nexport default Tasks;\n","import React, { Component } from 'react';\nimport Header from './Components/Header.js';\nimport TopBar from './Components/TopBar.js';\nimport Tasks from './Components/Tasks.js';\nimport './index.css';\n\nclass App extends Component{\n  state = {\n    tasks :[],\n    countCompleted:0,\n    countUncompleted:0,\n    countPending:0\n  }\n  render(){\n    return(\n      <div className='container'>\n        <Header title = \"To Do List\"/>\n        <TopBar addTask={this.addTask.bind(this)} taskList={this.state.tasks} completed={this.state.countCompleted} uncomplete={this.state.countUncompleted} pending={this.state.countPending}/>\n        <Tasks deleteTask={this.deleteTask} handleDone={this.handleDone} list={this.state.tasks}/>\n      </div>\n    );\n  }\n  addTask = (task) =>\n  {\n    this.setState({\n      tasks:[...this.state.tasks, task],\n      countPending:this.state.countPending+1\n    });\n  }\n  handleDone = (e, key) =>\n  {\n    var arr = [...this.state.tasks];\n    arr.splice(key,1);\n    this.setState({\n      tasks:arr,\n      countCompleted:this.state.countCompleted+1,\n      countPending:this.state.countPending-1\n    })\n  }\n  deleteTask = (e, key)=> {\n    var arr = [...this.state.tasks];\n    arr.splice(key,1);\n    this.setState({\n      tasks:arr,\n      countUncompleted:this.state.countUncompleted+1,\n      countPending:this.state.countPending-1\n    });\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport { render } from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nrender(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}